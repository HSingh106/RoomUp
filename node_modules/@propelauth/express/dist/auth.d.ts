/// <reference types="qs" />
import { BaseAuthOptions } from "@propelauth/node";
import { NextFunction, Request, Response } from "express";
export interface AuthOptions extends BaseAuthOptions {
    debugMode?: boolean;
}
export declare function initAuth(opts: AuthOptions): {
    requireUser: (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    optionalUser: (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    requireOrgMember: (args?: RequireOrgMemberArgs | undefined) => (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    requireOrgMemberWithMinimumRole: (args: RequireOrgMemberWithMinimumRoleArgs) => (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    requireOrgMemberWithExactRole: (args: RequireOrgMemberWithExactRoleArgs) => (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    requireOrgMemberWithPermission: (args: RequireOrgMemberWithPermissionArgs) => (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    requireOrgMemberWithAllPermissions: (args: RequireOrgMemberWithAllPermissionsArgs) => (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    fetchUserMetadataByUserId: (userId: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node-apis/.").UserMetadata | null>;
    fetchUserMetadataByEmail: (email: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node-apis/.").UserMetadata | null>;
    fetchUserMetadataByUsername: (username: string, includeOrgs?: boolean | undefined) => Promise<import("@propelauth/node-apis/.").UserMetadata | null>;
    fetchBatchUserMetadataByUserIds: (userIds: string[], includeOrgs?: boolean | undefined) => Promise<{
        [userId: string]: import("@propelauth/node-apis/.").UserMetadata;
    }>;
    fetchBatchUserMetadataByEmails: (emails: string[], includeOrgs?: boolean | undefined) => Promise<{
        [email: string]: import("@propelauth/node-apis/.").UserMetadata;
    }>;
    fetchBatchUserMetadataByUsernames: (usernames: string[], includeOrgs?: boolean | undefined) => Promise<{
        [username: string]: import("@propelauth/node-apis/.").UserMetadata;
    }>;
    fetchOrg: (orgId: string) => Promise<import("@propelauth/node-apis/.").Organization | null>;
    fetchOrgByQuery: (orgQuery: import("@propelauth/node-apis/.").OrgQuery) => Promise<import("@propelauth/node-apis/.").OrgQueryResponse>;
    fetchUsersByQuery: (usersQuery: import("@propelauth/node-apis/.").UsersQuery) => Promise<import("@propelauth/node-apis/.").UsersPagedResponse>;
    fetchUsersInOrg: (usersInOrgQuery: import("@propelauth/node-apis/.").UsersInOrgQuery) => Promise<import("@propelauth/node-apis/.").UsersPagedResponse>;
    createUser: (createUserRequest: import("@propelauth/node-apis/.").CreateUserRequest) => Promise<import("@propelauth/node-apis/.").CreatedUser>;
    updateUserMetadata: (userId: string, updateUserMetadataRequest: import("@propelauth/node-apis/.").UpdateUserMetadataRequest) => Promise<boolean>;
    updateUserEmail: (userId: string, updateUserEmailRequest: import("@propelauth/node-apis/.").UpdateUserEmailRequest) => Promise<boolean>;
    updateUserPassword: (userId: string, updateUserPasswordRequest: import("@propelauth/node-apis/.").UpdateUserPasswordRequest) => Promise<boolean>;
    createMagicLink: (createMagicLinkRequest: import("@propelauth/node-apis/.").CreateMagicLinkRequest) => Promise<import("@propelauth/node-apis/.").MagicLink>;
    createAccessToken: (createAccessTokenRequest: import("@propelauth/node-apis/.").CreateAccessTokenRequest) => Promise<import("@propelauth/node-apis/.").AccessToken>;
    migrateUserFromExternalSource: (migrateUserFromExternalSourceRequest: import("@propelauth/node-apis/.").MigrateUserFromExternalSourceRequest) => Promise<import("@propelauth/node-apis/.").CreatedUser>;
    disableUser2fa: (userId: string) => Promise<boolean>;
    clearUserPassword: (userId: string) => Promise<boolean>;
    inviteUserToOrg: (inviteUserToOrgRequest: import("@propelauth/node-apis/.").InviteUserToOrgRequest) => Promise<boolean>;
    createOrg: (createOrgRequest: import("@propelauth/node-apis/.").CreateOrgRequest) => Promise<import("@propelauth/node-apis/.").CreatedOrg>;
    addUserToOrg: (addUserToOrgRequest: import("@propelauth/node-apis/.").AddUserToOrgRequest) => Promise<boolean>;
    deleteUser: (userId: string) => Promise<boolean>;
    disableUser: (userId: string) => Promise<boolean>;
    enableUser: (userId: string) => Promise<boolean>;
    enableUserCanCreateOrgs: (userId: string) => Promise<boolean>;
    disableUserCanCreateOrgs: (userId: string) => Promise<boolean>;
    changeUserRoleInOrg: (changeUserRoleInOrgRequest: import("@propelauth/node-apis/.").ChangeUserRoleInOrgRequest) => Promise<boolean>;
    removeUserFromOrg: (removeUserFromOrgRequest: import("@propelauth/node-apis/.").RemoveUserFromOrgRequest) => Promise<boolean>;
    updateOrg: (updateOrgRequest: import("@propelauth/node-apis/.").UpdateOrgRequest) => Promise<boolean>;
    deleteOrg: (orgId: string) => Promise<boolean>;
    allowOrgToSetupSamlConnection: (orgId: string) => Promise<boolean>;
    disallowOrgToSetupSamlConnection: (orgId: string) => Promise<boolean>;
    fetchApiKey: (apiKeyId: string) => Promise<import("@propelauth/node-apis/.").ApiKeyFull>;
    fetchCurrentApiKeys: (apiKeyQuery: import("@propelauth/node-apis/.").ApiKeysQueryRequest) => Promise<import("@propelauth/node-apis/.").ApiKeyResultPage>;
    fetchArchivedApiKeys: (apiKeyQuery: import("@propelauth/node-apis/.").ApiKeysQueryRequest) => Promise<import("@propelauth/node-apis/.").ApiKeyResultPage>;
    createApiKey: (apiKeyCreate: import("@propelauth/node-apis/.").ApiKeysCreateRequest) => Promise<import("@propelauth/node-apis/.").ApiKeyNew>;
    updateApiKey: (apiKeyId: string, ApiKeyUpdate: import("@propelauth/node-apis/.").ApiKeyUpdateRequest) => Promise<boolean>;
    deleteApiKey: (apiKeyId: string) => Promise<boolean>;
    validateApiKey: (apiKeyToken: string) => Promise<import("@propelauth/node-apis/.").ApiKeyValidation>;
    validatePersonalApiKey: (apiKeyToken: string) => Promise<import("@propelauth/node-apis/.").PersonalApiKeyValidation>;
    validateOrgApiKey: (apiKeyToken: string) => Promise<import("@propelauth/node-apis/.").OrgApiKeyValidation>;
    fetchPendingInvites: (params?: import("@propelauth/node-apis/.").FetchPendingInvitesParams | undefined) => Promise<import("@propelauth/node-apis/.").PendingInvitesPage>;
    revokePendingOrgInvite: (revokePendingOrgInviteRequest: import("@propelauth/node-apis/.").RevokePendingOrgInviteRequest) => Promise<boolean>;
};
export interface RequireOrgMemberArgs {
    orgIdExtractor?: (req: Request) => string;
    orgNameExtractor?: (req: Request) => string;
}
export interface RequireOrgMemberWithMinimumRoleArgs {
    orgIdExtractor?: (req: Request) => string;
    orgNameExtractor?: (req: Request) => string;
    minimumRequiredRole: string;
}
export interface RequireOrgMemberWithExactRoleArgs {
    orgIdExtractor?: (req: Request) => string;
    orgNameExtractor?: (req: Request) => string;
    role: string;
}
export interface RequireOrgMemberWithPermissionArgs {
    orgIdExtractor?: (req: Request) => string;
    orgNameExtractor?: (req: Request) => string;
    permission: string;
}
export interface RequireOrgMemberWithAllPermissionsArgs {
    orgIdExtractor?: (req: Request) => string;
    orgNameExtractor?: (req: Request) => string;
    permissions: string[];
}
